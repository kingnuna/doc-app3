# This workflow will build a Java project with Maven, and cache/restore any dependencies to improve the workflow execution time
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-java-with-maven

# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

name: Java CI with Maven

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build:

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4
    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'
        cache: maven
    - name: Setup MySQL
      uses: mirromutth/mysql-action@v1.1
      with:
          host port: 3306
          container port: 3306
          mysql database: 'world' 
          mysql user: 'root'
          mysql password: '1234'
    - name: Build with Maven
      env:
          SPRING_DATASOURCE_URL: jdbc:mysql://localhost:3306/world
          SPRING_DATASOURCE_USERNAME: 'root'
          SPRING_DATASOURCE_PASSWORD: '1234'
      run: mvn -B package --file doc-app3/pom.xml && cp doc-app3/target/*.war doc-app3
      #run: mvn -Dmaven.test.skip=true -B package --file doc-app3/pom.xml && cp doc-app3/target/*.war doc-app3

     # Docker 이미지 빌드
    - name: docker image build
      run: cd doc-app3 && docker build -t kingnuna/doc-app3:v2 .

    # DockerHub 로그인
    - name: docker login
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_PASSWORD }}

    #Docker Hub 이미지 푸시
    - name: docker Hub push
      run: docker push kingnuna/doc-app3:v2

    # aws에 접속하여 도커허브에서 이미지 다운받아 실행
    - name: Deploy
      uses: appleboy/ssh-action@master
      with:
        host: 54.180.127.89      #aws ip
        port: 22		#ssh 포트
        username: ubuntu	#ec2 사용자. aws에서 whoami 명령 실행으로 확인. 명령라인 맨 앞에서 써있음
        key: ${{ secrets.PRIVATE_KEY }} # pem 키. ec2 생성시 public 키 생성하여 다운로드 받은 ~.pem 파일을 메모장으로 열어 그 안의 모든 내용 복사해서 변수 값으로 등록
        # 도커 작업
        script: |
          sudo docker container stop doc-app3 #컨테이너 종료
          sudo docker container rm doc-app3  #컨테이너 삭제
          sudo docker rmi kingnuna/doc-app3:v2  #이미지 삭제
          sudo docker pull kingnuna/doc-app3:v2 # 이미지 다운로드
          cd doc-app3
          sudo docker-compose up


